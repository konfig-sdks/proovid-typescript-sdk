/* tslint:disable */
/* eslint-disable */
/*
Proovid Electronic Verification

Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

The version of the OpenAPI document: v1
Contact: info@proovid.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AmlReport } from '../models';
// @ts-ignore
import { DeleteAmlReport } from '../models';
// @ts-ignore
import { NaturalPersonRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScreeningApi - axios parameter creator
 * @export
 */
export const ScreeningApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} reference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmlReport: async (reference: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reference' is not null or undefined
            assertParamExists('getAmlReport', 'reference', reference)
            const localVarPath = `/api/Screening/AmlReport/{reference}`
                .replace(`{${"reference"}}`, encodeURIComponent(String(reference !== undefined ? reference : `-reference-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Screening/AmlReport/{reference}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNaturalPersonById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNaturalPersonById', 'id', id)
            const localVarPath = `/api/Screening/NaturalPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Screening/NaturalPerson/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNaturalPerson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeNaturalPerson', 'id', id)
            const localVarPath = `/api/Screening/NaturalPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Screening/NaturalPerson/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NaturalPersonRequest} [naturalPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitNaturalPersonScreening: async (naturalPersonRequest?: NaturalPersonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Screening/NaturalPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: naturalPersonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Screening/NaturalPerson',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(naturalPersonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScreeningApi - functional programming interface
 * @export
 */
export const ScreeningApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScreeningApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ScreeningApiGetAmlReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmlReport(requestParameters: ScreeningApiGetAmlReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmlReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmlReport(requestParameters.reference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ScreeningApiGetNaturalPersonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNaturalPersonById(requestParameters: ScreeningApiGetNaturalPersonByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmlReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNaturalPersonById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ScreeningApiRemoveNaturalPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeNaturalPerson(requestParameters: ScreeningApiRemoveNaturalPersonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAmlReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeNaturalPerson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ScreeningApiSubmitNaturalPersonScreeningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitNaturalPersonScreening(requestParameters: ScreeningApiSubmitNaturalPersonScreeningRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmlReport>> {
            const naturalPersonRequest: NaturalPersonRequest = {
                naturalPersonId: requestParameters.naturalPersonId,
                firstName: requestParameters.firstName,
                middleName: requestParameters.middleName,
                lastName: requestParameters.lastName,
                dob: requestParameters.dob,
                partialMatch: requestParameters.partialMatch,
                document: requestParameters.document,
                documentType: requestParameters.documentType
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitNaturalPersonScreening(naturalPersonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScreeningApi - factory interface
 * @export
 */
export const ScreeningApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScreeningApiFp(configuration)
    return {
        /**
         * 
         * @param {ScreeningApiGetAmlReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmlReport(requestParameters: ScreeningApiGetAmlReportRequest, options?: AxiosRequestConfig): AxiosPromise<AmlReport> {
            return localVarFp.getAmlReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ScreeningApiGetNaturalPersonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNaturalPersonById(requestParameters: ScreeningApiGetNaturalPersonByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AmlReport> {
            return localVarFp.getNaturalPersonById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ScreeningApiRemoveNaturalPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNaturalPerson(requestParameters: ScreeningApiRemoveNaturalPersonRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteAmlReport> {
            return localVarFp.removeNaturalPerson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ScreeningApiSubmitNaturalPersonScreeningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitNaturalPersonScreening(requestParameters: ScreeningApiSubmitNaturalPersonScreeningRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AmlReport> {
            return localVarFp.submitNaturalPersonScreening(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAmlReport operation in ScreeningApi.
 * @export
 * @interface ScreeningApiGetAmlReportRequest
 */
export type ScreeningApiGetAmlReportRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ScreeningApiGetAmlReport
    */
    readonly reference: string
    
}

/**
 * Request parameters for getNaturalPersonById operation in ScreeningApi.
 * @export
 * @interface ScreeningApiGetNaturalPersonByIdRequest
 */
export type ScreeningApiGetNaturalPersonByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ScreeningApiGetNaturalPersonById
    */
    readonly id: number
    
}

/**
 * Request parameters for removeNaturalPerson operation in ScreeningApi.
 * @export
 * @interface ScreeningApiRemoveNaturalPersonRequest
 */
export type ScreeningApiRemoveNaturalPersonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ScreeningApiRemoveNaturalPerson
    */
    readonly id: number
    
}

/**
 * Request parameters for submitNaturalPersonScreening operation in ScreeningApi.
 * @export
 * @interface ScreeningApiSubmitNaturalPersonScreeningRequest
 */
export type ScreeningApiSubmitNaturalPersonScreeningRequest = {
    
} & NaturalPersonRequest

/**
 * ScreeningApiGenerated - object-oriented interface
 * @export
 * @class ScreeningApiGenerated
 * @extends {BaseAPI}
 */
export class ScreeningApiGenerated extends BaseAPI {
    /**
     * 
     * @param {ScreeningApiGetAmlReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreeningApiGenerated
     */
    public getAmlReport(requestParameters: ScreeningApiGetAmlReportRequest, options?: AxiosRequestConfig) {
        return ScreeningApiFp(this.configuration).getAmlReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ScreeningApiGetNaturalPersonByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreeningApiGenerated
     */
    public getNaturalPersonById(requestParameters: ScreeningApiGetNaturalPersonByIdRequest, options?: AxiosRequestConfig) {
        return ScreeningApiFp(this.configuration).getNaturalPersonById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ScreeningApiRemoveNaturalPersonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreeningApiGenerated
     */
    public removeNaturalPerson(requestParameters: ScreeningApiRemoveNaturalPersonRequest, options?: AxiosRequestConfig) {
        return ScreeningApiFp(this.configuration).removeNaturalPerson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ScreeningApiSubmitNaturalPersonScreeningRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreeningApiGenerated
     */
    public submitNaturalPersonScreening(requestParameters: ScreeningApiSubmitNaturalPersonScreeningRequest = {}, options?: AxiosRequestConfig) {
        return ScreeningApiFp(this.configuration).submitNaturalPersonScreening(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
