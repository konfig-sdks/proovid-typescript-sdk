/* tslint:disable */
/* eslint-disable */
/*
Proovid Electronic Verification

Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

The version of the OpenAPI document: v1
Contact: info@proovid.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressRequest } from '../models';
// @ts-ignore
import { AddressVerificationDeleteResult } from '../models';
// @ts-ignore
import { AddressVerificationResult } from '../models';
// @ts-ignore
import { GpsLocation } from '../models';
// @ts-ignore
import { InfoGps } from '../models';
// @ts-ignore
import { NaturalPersonELVRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NaturalPersonELVRequest} [naturalPersonELVRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNaturalPersonElv: async (naturalPersonELVRequest?: NaturalPersonELVRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/NaturalPersonELV`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: naturalPersonELVRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Address/NaturalPersonELV',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(naturalPersonELVRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InfoGps} [infoGps] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkResponse: async (infoGps?: InfoGps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/LinkResponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: infoGps,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Address/LinkResponse',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(infoGps, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyById', 'id', id)
            const localVarPath = `/api/Address/AddressVerification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Address/AddressVerification/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyById_1: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyById_1', 'id', id)
            const localVarPath = `/api/Address/AddressVerification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Address/AddressVerification/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddressRequest} [addressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyByLevel: async (addressRequest?: AddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/VerificationByLevel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Address/VerificationByLevel',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCertificatePdf: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyCertificatePdf', 'id', id)
            const localVarPath = `/api/Address/AddressVerification/{id}/certificate.pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Address/AddressVerification/{id}/certificate.pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddressApiCreateNaturalPersonElvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNaturalPersonElv(requestParameters: AddressApiCreateNaturalPersonElvRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressVerificationResult>> {
            const naturalPersonELVRequest: NaturalPersonELVRequest = {
                naturalPersonIndexId: requestParameters.naturalPersonIndexId,
                street: requestParameters.street,
                streetNumber: requestParameters.streetNumber,
                unit: requestParameters.unit,
                zipCode: requestParameters.zipCode,
                city: requestParameters.city,
                district: requestParameters.district,
                region: requestParameters.region,
                country: requestParameters.country,
                email: requestParameters.email,
                mobile: requestParameters.mobile,
                fullAddress: requestParameters.fullAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNaturalPersonElv(naturalPersonELVRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddressApiLinkResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkResponse(requestParameters: AddressApiLinkResponseRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const infoGps: InfoGps = {
                link: requestParameters.link,
                coords: requestParameters.coords
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkResponse(infoGps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddressApiVerifyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyById(requestParameters: AddressApiVerifyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressVerificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddressApiVerifyById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyById_1(requestParameters: AddressApiVerifyById0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressVerificationDeleteResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyById_1(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddressApiVerifyByLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyByLevel(requestParameters: AddressApiVerifyByLevelRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressVerificationResult>> {
            const addressRequest: AddressRequest = {
                referenceId: requestParameters.referenceId,
                email: requestParameters.email,
                naturalPersonId: requestParameters.naturalPersonId,
                naturalPersonIndexId: requestParameters.naturalPersonIndexId,
                name: requestParameters.name,
                surname: requestParameters.surname,
                mobilePhone: requestParameters.mobilePhone,
                language: requestParameters.language,
                verificationLevel: requestParameters.verificationLevel,
                document: requestParameters.document,
                street: requestParameters.street,
                streetNumber: requestParameters.streetNumber,
                unit: requestParameters.unit,
                district: requestParameters.district,
                city: requestParameters.city,
                region: requestParameters.region,
                zipCode: requestParameters.zipCode,
                country: requestParameters.country,
                fullAddress: requestParameters.fullAddress,
                skipDocumentComparison: requestParameters.skipDocumentComparison,
                validityPeriod: requestParameters.validityPeriod
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyByLevel(addressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddressApiVerifyCertificatePdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCertificatePdf(requestParameters: AddressApiVerifyCertificatePdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyCertificatePdf(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @param {AddressApiCreateNaturalPersonElvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNaturalPersonElv(requestParameters: AddressApiCreateNaturalPersonElvRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddressVerificationResult> {
            return localVarFp.createNaturalPersonElv(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddressApiLinkResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkResponse(requestParameters: AddressApiLinkResponseRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.linkResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddressApiVerifyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyById(requestParameters: AddressApiVerifyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AddressVerificationResult> {
            return localVarFp.verifyById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddressApiVerifyById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyById_1(requestParameters: AddressApiVerifyById0Request, options?: AxiosRequestConfig): AxiosPromise<AddressVerificationDeleteResult> {
            return localVarFp.verifyById_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddressApiVerifyByLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyByLevel(requestParameters: AddressApiVerifyByLevelRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddressVerificationResult> {
            return localVarFp.verifyByLevel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddressApiVerifyCertificatePdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCertificatePdf(requestParameters: AddressApiVerifyCertificatePdfRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.verifyCertificatePdf(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNaturalPersonElv operation in AddressApi.
 * @export
 * @interface AddressApiCreateNaturalPersonElvRequest
 */
export type AddressApiCreateNaturalPersonElvRequest = {
    
} & NaturalPersonELVRequest

/**
 * Request parameters for linkResponse operation in AddressApi.
 * @export
 * @interface AddressApiLinkResponseRequest
 */
export type AddressApiLinkResponseRequest = {
    
} & InfoGps

/**
 * Request parameters for verifyById operation in AddressApi.
 * @export
 * @interface AddressApiVerifyByIdRequest
 */
export type AddressApiVerifyByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AddressApiVerifyById
    */
    readonly id: number
    
}

/**
 * Request parameters for verifyById_1 operation in AddressApi.
 * @export
 * @interface AddressApiVerifyById0Request
 */
export type AddressApiVerifyById0Request = {
    
    /**
    * 
    * @type {number}
    * @memberof AddressApiVerifyById0
    */
    readonly id: number
    
}

/**
 * Request parameters for verifyByLevel operation in AddressApi.
 * @export
 * @interface AddressApiVerifyByLevelRequest
 */
export type AddressApiVerifyByLevelRequest = {
    
} & AddressRequest

/**
 * Request parameters for verifyCertificatePdf operation in AddressApi.
 * @export
 * @interface AddressApiVerifyCertificatePdfRequest
 */
export type AddressApiVerifyCertificatePdfRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AddressApiVerifyCertificatePdf
    */
    readonly id: number
    
}

/**
 * AddressApiGenerated - object-oriented interface
 * @export
 * @class AddressApiGenerated
 * @extends {BaseAPI}
 */
export class AddressApiGenerated extends BaseAPI {
    /**
     * 
     * @param {AddressApiCreateNaturalPersonElvRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApiGenerated
     */
    public createNaturalPersonElv(requestParameters: AddressApiCreateNaturalPersonElvRequest = {}, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).createNaturalPersonElv(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddressApiLinkResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApiGenerated
     */
    public linkResponse(requestParameters: AddressApiLinkResponseRequest = {}, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).linkResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddressApiVerifyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApiGenerated
     */
    public verifyById(requestParameters: AddressApiVerifyByIdRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).verifyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddressApiVerifyById0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApiGenerated
     */
    public verifyById_1(requestParameters: AddressApiVerifyById0Request, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).verifyById_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddressApiVerifyByLevelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApiGenerated
     */
    public verifyByLevel(requestParameters: AddressApiVerifyByLevelRequest = {}, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).verifyByLevel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddressApiVerifyCertificatePdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApiGenerated
     */
    public verifyCertificatePdf(requestParameters: AddressApiVerifyCertificatePdfRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).verifyCertificatePdf(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
