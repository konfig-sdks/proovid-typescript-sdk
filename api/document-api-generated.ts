/* tslint:disable */
/* eslint-disable */
/*
Proovid Electronic Verification

Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

The version of the OpenAPI document: v1
Contact: info@proovid.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteDocumentVerificationResponse } from '../models';
// @ts-ignore
import { DocumentVerificationRequest } from '../models';
// @ts-ignore
import { DocumentVerificationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DocumentApi - axios parameter creator
 * @export
 */
export const DocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertificate: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCertificate', 'id', id)
            const localVarPath = `/api/Document/DocumentVerification/{id}/certificate.pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Document/DocumentVerification/{id}/certificate.pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDeletion: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyDeletion', 'id', id)
            const localVarPath = `/api/Document/DocumentVerification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Document/DocumentVerification/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStatus: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyStatus', 'id', id)
            const localVarPath = `/api/Document/DocumentVerification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Document/DocumentVerification/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentVerificationRequest} [documentVerificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStatus_1: async (documentVerificationRequest?: DocumentVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Document/VerifyDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: documentVerificationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/Document/VerifyDocument',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(documentVerificationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentApi - functional programming interface
 * @export
 */
export const DocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DocumentApiGetCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCertificate(requestParameters: DocumentApiGetCertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCertificate(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentApiVerifyDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDeletion(requestParameters: DocumentApiVerifyDeletionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDocumentVerificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyDeletion(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentApiVerifyStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyStatus(requestParameters: DocumentApiVerifyStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentVerificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyStatus(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentApiVerifyStatus0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyStatus_1(requestParameters: DocumentApiVerifyStatus0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentVerificationResponse>> {
            const documentVerificationRequest: DocumentVerificationRequest = {
                email: requestParameters.email,
                country: requestParameters.country,
                document: requestParameters.document,
                additionalDocument: requestParameters.additionalDocument,
                face: requestParameters.face,
                documentType: requestParameters.documentType,
                naturalPersonId: requestParameters.naturalPersonId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyStatus_1(documentVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentApi - factory interface
 * @export
 */
export const DocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentApiFp(configuration)
    return {
        /**
         * 
         * @param {DocumentApiGetCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertificate(requestParameters: DocumentApiGetCertificateRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getCertificate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentApiVerifyDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDeletion(requestParameters: DocumentApiVerifyDeletionRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteDocumentVerificationResponse> {
            return localVarFp.verifyDeletion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentApiVerifyStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStatus(requestParameters: DocumentApiVerifyStatusRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentVerificationResponse> {
            return localVarFp.verifyStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentApiVerifyStatus0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStatus_1(requestParameters: DocumentApiVerifyStatus0Request = {}, options?: AxiosRequestConfig): AxiosPromise<DocumentVerificationResponse> {
            return localVarFp.verifyStatus_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCertificate operation in DocumentApi.
 * @export
 * @interface DocumentApiGetCertificateRequest
 */
export type DocumentApiGetCertificateRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiGetCertificate
    */
    readonly id: number
    
}

/**
 * Request parameters for verifyDeletion operation in DocumentApi.
 * @export
 * @interface DocumentApiVerifyDeletionRequest
 */
export type DocumentApiVerifyDeletionRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiVerifyDeletion
    */
    readonly id: number
    
}

/**
 * Request parameters for verifyStatus operation in DocumentApi.
 * @export
 * @interface DocumentApiVerifyStatusRequest
 */
export type DocumentApiVerifyStatusRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiVerifyStatus
    */
    readonly id: number
    
}

/**
 * Request parameters for verifyStatus_1 operation in DocumentApi.
 * @export
 * @interface DocumentApiVerifyStatus0Request
 */
export type DocumentApiVerifyStatus0Request = {
    
} & DocumentVerificationRequest

/**
 * DocumentApiGenerated - object-oriented interface
 * @export
 * @class DocumentApiGenerated
 * @extends {BaseAPI}
 */
export class DocumentApiGenerated extends BaseAPI {
    /**
     * 
     * @param {DocumentApiGetCertificateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public getCertificate(requestParameters: DocumentApiGetCertificateRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).getCertificate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentApiVerifyDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public verifyDeletion(requestParameters: DocumentApiVerifyDeletionRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).verifyDeletion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentApiVerifyStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public verifyStatus(requestParameters: DocumentApiVerifyStatusRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).verifyStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentApiVerifyStatus0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public verifyStatus_1(requestParameters: DocumentApiVerifyStatus0Request = {}, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).verifyStatus_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
