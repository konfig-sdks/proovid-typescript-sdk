/* tslint:disable */
/* eslint-disable */
/*
Proovid Electronic Verification

Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

The version of the OpenAPI document: v1
Contact: info@proovid.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddNaturalPersonInfoRequest } from '../models';
// @ts-ignore
import { AddNaturalPersonRequest } from '../models';
// @ts-ignore
import { AddNaturalPersonResponseBaseResponse } from '../models';
// @ts-ignore
import { AmlReport } from '../models';
// @ts-ignore
import { BaseResponse } from '../models';
// @ts-ignore
import { DeleteAmlReport } from '../models';
// @ts-ignore
import { EGender } from '../models';
// @ts-ignore
import { EScore } from '../models';
// @ts-ignore
import { NaturalPersonDocumentRequest } from '../models';
// @ts-ignore
import { NaturalPersonDocumentsRequest } from '../models';
// @ts-ignore
import { NaturalPersonIdDocumentRequest } from '../models';
// @ts-ignore
import { NaturalPersonInfoResponseBaseResponse } from '../models';
// @ts-ignore
import { NaturalPersonResponseBaseResponse } from '../models';
// @ts-ignore
import { SumSubVerificationResponseBaseResponse } from '../models';
// @ts-ignore
import { SumSubVerificationResponseListBaseResponse } from '../models';
// @ts-ignore
import { UpdateNaturalPersonDocumentsResponseBaseResponse } from '../models';
// @ts-ignore
import { UpdateNaturalPersonEconomicProfileRequest } from '../models';
// @ts-ignore
import { UpdateNaturalPersonInfoRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NaturalPersonApi - axios parameter creator
 * @export
 */
export const NaturalPersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddNaturalPersonRequest} [addNaturalPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdate: async (addNaturalPersonRequest?: AddNaturalPersonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/NaturalPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addNaturalPersonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addNaturalPersonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteById', 'id', id)
            const localVarPath = `/api/NaturalPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/NaturalPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById_1: async (reference: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reference' is not null or undefined
            assertParamExists('getById_1', 'reference', reference)
            const localVarPath = `/api/NaturalPerson/{reference}`
                .replace(`{${"reference"}}`, encodeURIComponent(String(reference !== undefined ? reference : `-reference-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{reference}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertificate: async (naturalPersonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('getCertificate', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/certificate`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/certificate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (naturalPersonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('getDetails', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/get`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/get',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} verificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerificationRecord: async (verificationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationId' is not null or undefined
            assertParamExists('getVerificationRecord', 'verificationId', verificationId)
            const localVarPath = `/api/NaturalPerson/verificationRecord/{verificationId}`
                .replace(`{${"verificationId"}}`, encodeURIComponent(String(verificationId !== undefined ? verificationId : `-verificationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/verificationRecord/{verificationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifications: async (naturalPersonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('getVerifications', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/verifications`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/verifications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (naturalPersonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('removeById', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/delete`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/delete',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {NaturalPersonDocumentsRequest} [naturalPersonDocumentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocuments: async (naturalPersonId: number, naturalPersonDocumentsRequest?: NaturalPersonDocumentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('updateDocuments', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/updateDocuments`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: naturalPersonDocumentsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/updateDocuments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(naturalPersonDocumentsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {UpdateNaturalPersonInfoRequest} [updateNaturalPersonInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInformation: async (naturalPersonId: number, updateNaturalPersonInfoRequest?: UpdateNaturalPersonInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('updateInformation', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/updateInfo`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateNaturalPersonInfoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/updateInfo',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateNaturalPersonInfoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddNaturalPersonRequest} [addNaturalPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDetails: async (addNaturalPersonRequest?: AddNaturalPersonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/NaturalPerson/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addNaturalPersonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/verify',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addNaturalPersonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDetails_2: async (naturalPersonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('verifyDetails_2', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/verify`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/verify',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} naturalPersonId 
         * @param {NaturalPersonDocumentsRequest} [naturalPersonDocumentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDocuments: async (naturalPersonId: number, naturalPersonDocumentsRequest?: NaturalPersonDocumentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'naturalPersonId' is not null or undefined
            assertParamExists('verifyDocuments', 'naturalPersonId', naturalPersonId)
            const localVarPath = `/api/NaturalPerson/{naturalPersonId}/updateDocuments/verify`
                .replace(`{${"naturalPersonId"}}`, encodeURIComponent(String(naturalPersonId !== undefined ? naturalPersonId : `-naturalPersonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: naturalPersonDocumentsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/{naturalPersonId}/updateDocuments/verify',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(naturalPersonDocumentsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddNaturalPersonRequest} [addNaturalPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEntity: async (addNaturalPersonRequest?: AddNaturalPersonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/NaturalPerson/verifyentity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addNaturalPersonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/NaturalPerson/verifyentity',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addNaturalPersonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NaturalPersonApi - functional programming interface
 * @export
 */
export const NaturalPersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NaturalPersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {NaturalPersonApiCreateOrUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdate(requestParameters: NaturalPersonApiCreateOrUpdateRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddNaturalPersonResponseBaseResponse>> {
            const addNaturalPersonRequest: AddNaturalPersonRequest = {
                info: requestParameters.info,
                clientReferenceId: requestParameters.clientReferenceId,
                documents: requestParameters.documents
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdate(addNaturalPersonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: NaturalPersonApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAmlReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: NaturalPersonApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmlReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiGetById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById_1(requestParameters: NaturalPersonApiGetById0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmlReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById_1(requestParameters.reference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiGetCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCertificate(requestParameters: NaturalPersonApiGetCertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCertificate(requestParameters.naturalPersonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: NaturalPersonApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NaturalPersonResponseBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.naturalPersonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiGetVerificationRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerificationRecord(requestParameters: NaturalPersonApiGetVerificationRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NaturalPersonInfoResponseBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerificationRecord(requestParameters.verificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiGetVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerifications(requestParameters: NaturalPersonApiGetVerificationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SumSubVerificationResponseListBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerifications(requestParameters.naturalPersonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: NaturalPersonApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.naturalPersonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiUpdateDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocuments(requestParameters: NaturalPersonApiUpdateDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateNaturalPersonDocumentsResponseBaseResponse>> {
            const naturalPersonDocumentsRequest: NaturalPersonDocumentsRequest = {
                idDocument: requestParameters.idDocument,
                addressDocument: requestParameters.addressDocument
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocuments(requestParameters.naturalPersonId, naturalPersonDocumentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiUpdateInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInformation(requestParameters: NaturalPersonApiUpdateInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NaturalPersonInfoResponseBaseResponse>> {
            const updateNaturalPersonInfoRequest: UpdateNaturalPersonInfoRequest = {
                clientReferenceId: requestParameters.clientReferenceId,
                taxId: requestParameters.taxId,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                middleName: requestParameters.middleName,
                legalName: requestParameters.legalName,
                dateOfBirth: requestParameters.dateOfBirth,
                gender: requestParameters.gender,
                countryBirth: requestParameters.countryBirth,
                countryResidence: requestParameters.countryResidence,
                countryMainBusiness: requestParameters.countryMainBusiness,
                nationality: requestParameters.nationality,
                email: requestParameters.email,
                emailTwo: requestParameters.emailTwo,
                mobilePhone: requestParameters.mobilePhone,
                mobilePhoneTwo: requestParameters.mobilePhoneTwo,
                automaticallyUpdateNPRisk: requestParameters.automaticallyUpdateNPRisk,
                riskLevel: requestParameters.riskLevel,
                riskLevelJustification: requestParameters.riskLevelJustification,
                isFlagged: requestParameters.isFlagged,
                comments: requestParameters.comments,
                economicProfile: requestParameters.economicProfile
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInformation(requestParameters.naturalPersonId, updateNaturalPersonInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDetails(requestParameters: NaturalPersonApiVerifyDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddNaturalPersonResponseBaseResponse>> {
            const addNaturalPersonRequest: AddNaturalPersonRequest = {
                info: requestParameters.info,
                clientReferenceId: requestParameters.clientReferenceId,
                documents: requestParameters.documents
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyDetails(addNaturalPersonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDetails_2(requestParameters: NaturalPersonApiVerifyDetails0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SumSubVerificationResponseBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyDetails_2(requestParameters.naturalPersonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDocuments(requestParameters: NaturalPersonApiVerifyDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateNaturalPersonDocumentsResponseBaseResponse>> {
            const naturalPersonDocumentsRequest: NaturalPersonDocumentsRequest = {
                idDocument: requestParameters.idDocument,
                addressDocument: requestParameters.addressDocument
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyDocuments(requestParameters.naturalPersonId, naturalPersonDocumentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyEntityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEntity(requestParameters: NaturalPersonApiVerifyEntityRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddNaturalPersonResponseBaseResponse>> {
            const addNaturalPersonRequest: AddNaturalPersonRequest = {
                info: requestParameters.info,
                clientReferenceId: requestParameters.clientReferenceId,
                documents: requestParameters.documents
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEntity(addNaturalPersonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NaturalPersonApi - factory interface
 * @export
 */
export const NaturalPersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NaturalPersonApiFp(configuration)
    return {
        /**
         * 
         * @param {NaturalPersonApiCreateOrUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdate(requestParameters: NaturalPersonApiCreateOrUpdateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddNaturalPersonResponseBaseResponse> {
            return localVarFp.createOrUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: NaturalPersonApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteAmlReport> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: NaturalPersonApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AmlReport> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiGetById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById_1(requestParameters: NaturalPersonApiGetById0Request, options?: AxiosRequestConfig): AxiosPromise<AmlReport> {
            return localVarFp.getById_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiGetCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertificate(requestParameters: NaturalPersonApiGetCertificateRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getCertificate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: NaturalPersonApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<NaturalPersonResponseBaseResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiGetVerificationRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerificationRecord(requestParameters: NaturalPersonApiGetVerificationRecordRequest, options?: AxiosRequestConfig): AxiosPromise<NaturalPersonInfoResponseBaseResponse> {
            return localVarFp.getVerificationRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiGetVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifications(requestParameters: NaturalPersonApiGetVerificationsRequest, options?: AxiosRequestConfig): AxiosPromise<SumSubVerificationResponseListBaseResponse> {
            return localVarFp.getVerifications(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: NaturalPersonApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiUpdateDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocuments(requestParameters: NaturalPersonApiUpdateDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateNaturalPersonDocumentsResponseBaseResponse> {
            return localVarFp.updateDocuments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiUpdateInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInformation(requestParameters: NaturalPersonApiUpdateInformationRequest, options?: AxiosRequestConfig): AxiosPromise<NaturalPersonInfoResponseBaseResponse> {
            return localVarFp.updateInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDetails(requestParameters: NaturalPersonApiVerifyDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddNaturalPersonResponseBaseResponse> {
            return localVarFp.verifyDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDetails_2(requestParameters: NaturalPersonApiVerifyDetails0Request, options?: AxiosRequestConfig): AxiosPromise<SumSubVerificationResponseBaseResponse> {
            return localVarFp.verifyDetails_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDocuments(requestParameters: NaturalPersonApiVerifyDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateNaturalPersonDocumentsResponseBaseResponse> {
            return localVarFp.verifyDocuments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NaturalPersonApiVerifyEntityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEntity(requestParameters: NaturalPersonApiVerifyEntityRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddNaturalPersonResponseBaseResponse> {
            return localVarFp.verifyEntity(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrUpdate operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiCreateOrUpdateRequest
 */
export type NaturalPersonApiCreateOrUpdateRequest = {
    
} & AddNaturalPersonRequest

/**
 * Request parameters for deleteById operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiDeleteByIdRequest
 */
export type NaturalPersonApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiDeleteById
    */
    readonly id: number
    
}

/**
 * Request parameters for getById operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiGetByIdRequest
 */
export type NaturalPersonApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiGetById
    */
    readonly id: number
    
}

/**
 * Request parameters for getById_1 operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiGetById0Request
 */
export type NaturalPersonApiGetById0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof NaturalPersonApiGetById0
    */
    readonly reference: string
    
}

/**
 * Request parameters for getCertificate operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiGetCertificateRequest
 */
export type NaturalPersonApiGetCertificateRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiGetCertificate
    */
    readonly naturalPersonId: number
    
}

/**
 * Request parameters for getDetails operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiGetDetailsRequest
 */
export type NaturalPersonApiGetDetailsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiGetDetails
    */
    readonly naturalPersonId: number
    
}

/**
 * Request parameters for getVerificationRecord operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiGetVerificationRecordRequest
 */
export type NaturalPersonApiGetVerificationRecordRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiGetVerificationRecord
    */
    readonly verificationId: number
    
}

/**
 * Request parameters for getVerifications operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiGetVerificationsRequest
 */
export type NaturalPersonApiGetVerificationsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiGetVerifications
    */
    readonly naturalPersonId: number
    
}

/**
 * Request parameters for removeById operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiRemoveByIdRequest
 */
export type NaturalPersonApiRemoveByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiRemoveById
    */
    readonly naturalPersonId: number
    
}

/**
 * Request parameters for updateDocuments operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiUpdateDocumentsRequest
 */
export type NaturalPersonApiUpdateDocumentsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiUpdateDocuments
    */
    readonly naturalPersonId: number
    
} & NaturalPersonDocumentsRequest

/**
 * Request parameters for updateInformation operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiUpdateInformationRequest
 */
export type NaturalPersonApiUpdateInformationRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiUpdateInformation
    */
    readonly naturalPersonId: number
    
} & UpdateNaturalPersonInfoRequest

/**
 * Request parameters for verifyDetails operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiVerifyDetailsRequest
 */
export type NaturalPersonApiVerifyDetailsRequest = {
    
} & AddNaturalPersonRequest

/**
 * Request parameters for verifyDetails_2 operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiVerifyDetails0Request
 */
export type NaturalPersonApiVerifyDetails0Request = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiVerifyDetails0
    */
    readonly naturalPersonId: number
    
}

/**
 * Request parameters for verifyDocuments operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiVerifyDocumentsRequest
 */
export type NaturalPersonApiVerifyDocumentsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NaturalPersonApiVerifyDocuments
    */
    readonly naturalPersonId: number
    
} & NaturalPersonDocumentsRequest

/**
 * Request parameters for verifyEntity operation in NaturalPersonApi.
 * @export
 * @interface NaturalPersonApiVerifyEntityRequest
 */
export type NaturalPersonApiVerifyEntityRequest = {
    
} & AddNaturalPersonRequest

/**
 * NaturalPersonApiGenerated - object-oriented interface
 * @export
 * @class NaturalPersonApiGenerated
 * @extends {BaseAPI}
 */
export class NaturalPersonApiGenerated extends BaseAPI {
    /**
     * 
     * @param {NaturalPersonApiCreateOrUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public createOrUpdate(requestParameters: NaturalPersonApiCreateOrUpdateRequest = {}, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).createOrUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public deleteById(requestParameters: NaturalPersonApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public getById(requestParameters: NaturalPersonApiGetByIdRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiGetById0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public getById_1(requestParameters: NaturalPersonApiGetById0Request, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).getById_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiGetCertificateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public getCertificate(requestParameters: NaturalPersonApiGetCertificateRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).getCertificate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public getDetails(requestParameters: NaturalPersonApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiGetVerificationRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public getVerificationRecord(requestParameters: NaturalPersonApiGetVerificationRecordRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).getVerificationRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiGetVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public getVerifications(requestParameters: NaturalPersonApiGetVerificationsRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).getVerifications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public removeById(requestParameters: NaturalPersonApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiUpdateDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public updateDocuments(requestParameters: NaturalPersonApiUpdateDocumentsRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).updateDocuments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiUpdateInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public updateInformation(requestParameters: NaturalPersonApiUpdateInformationRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).updateInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiVerifyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public verifyDetails(requestParameters: NaturalPersonApiVerifyDetailsRequest = {}, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).verifyDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiVerifyDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public verifyDetails_2(requestParameters: NaturalPersonApiVerifyDetails0Request, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).verifyDetails_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiVerifyDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public verifyDocuments(requestParameters: NaturalPersonApiVerifyDocumentsRequest, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).verifyDocuments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NaturalPersonApiVerifyEntityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaturalPersonApiGenerated
     */
    public verifyEntity(requestParameters: NaturalPersonApiVerifyEntityRequest = {}, options?: AxiosRequestConfig) {
        return NaturalPersonApiFp(this.configuration).verifyEntity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
